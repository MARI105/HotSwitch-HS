local Debugger = require("hotswitch-hs/lib/common/Debugger")
local KeyConstants = require("hotswitch-hs/lib/common/KeyConstants")
local HotkeyModel = require("hotswitch-hs/lib/model/HotkeyModel")
local WindowModel = require("hotswitch-hs/lib/model/WindowModel")
local SettingsModel = require("hotswitch-hs/lib/model/SettingModel")
local KeyStatusModel = require("hotswitch-hs/lib/model/KeyStatusModel")
local AppWatchModel = require("hotswitch-hs/lib/model/AppWatchModel")
local PanelLayoutView = require("hotswitch-hs/lib/view/PanelLayoutView")

local MainController = {}
MainController.new = function()
    local obj = {}

    obj.isRegistrationMode = false

    obj.windowModel = WindowModel.new()
    obj.settingModel = SettingsModel.new()
    obj.keyStatusModel = KeyStatusModel.new(obj.windowModel, obj.settingModel)
    obj.appWatchModel = AppWatchModel.new()
    obj.hotkeyModel = HotkeyModel.new(obj.windowModel, obj.settingModel, obj.keyStatusModel, obj.appWatchModel)

    obj.panelLayoutView = PanelLayoutView.new(obj.windowModel, obj.settingModel, obj.keyStatusModel)

    obj.init = function(self)
        self.hotkeyModel:createHotkeys(self.panelLayoutView)
        self.keyStatusModel:resetAutoGeneratedKeys()

        self.panelLayoutView:setClickCallback(function(position)
            self.focusWindow(self.windowModel:getCachedOrderedWindowsOrFetch()[position])
            self:finish()
        end)
    end

    obj.openOrClose = function(self)
        if self.panelLayoutView.isOpen then
            self.windowModel:focusPreviousWindowForCancel()
            self:finish()
        else
            self.windowModel.previousWindow = hs.window.frontmostWindow()

            -- Enable hotkeys before refresh windows,
            -- because refreshing windows is slow and take time.
            self.hotkeyModel:enableHotkeys()
            self.panelLayoutView:activateHammerspoonWindow()
            self.windowModel:refreshOrderedWindows()

            self.keyStatusModel:createKeyStatuses()
            self.panelLayoutView:show()
            self.appWatchModel:watchAppliationDeactivated()
        end
    end

    obj.clearSettings = function(self)
        self.settingModel.clear()
    end

    obj.setAutoGeneratedKeys = function(self, specifiedAutoGeneratedKeys)
        self.keyStatusModel:setSpecifiedAutoGeneratedKeys(specifiedAutoGeneratedKeys)
        self.keyStatusModel:resetAutoGeneratedKeys()
    end

    obj.finish = function(self)
        self.panelLayoutView:hide()
        self.hotkeyModel:disableHotkeys()
        self.appWatchModel:unwatchAppliationDeactivated()
    end

    return obj
end
return MainController